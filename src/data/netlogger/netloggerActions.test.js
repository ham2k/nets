import configureMockStore from 'redux-mock-store'
import thunk from 'redux-thunk'

import { getInitialData, getNetSubscription } from './netloggerActions'
import setupNetloggerSamples from './samples'

const middlewares = [thunk]
const mockStore = configureMockStore(middlewares)

describe('NetLogger API Calls', () => {
  beforeEach(() => {
    fetch.resetMocks()
    setupNetloggerSamples()
  })

  describe('Load initial data', () => {
    test('Loads server list', (done) => {
      const store = mockStore({})

      store
        .dispatch(getInitialData())
        .then(() => {
          // First round of dispatch will execute the `getInitialData` thunk
          // Second round, via `setImmediate`, will execute the `getServerInfo` thunks generated by `getInitialData`
          // Third round, via `setImmediate`, will execute the `getNetsList` thunks generated by `getServerInfo`
          setImmediate(() => {
            const actions = store.getActions()

            let action

            action = actions.shift()
            expect(action.type).toBe('netlogger/setMeta')
            expect(action.payload).toMatchObject({
              errors: [],
            })

            action = actions.shift()
            expect(action.type).toBe('netlogger/setServerList')
            expect(action.payload).toEqual([
              'http://www.netlogger.org:80',
              'http://www.netlogger1.org:80',
              'http://www.netlogger2.org:80',
            ])

            action = actions.shift()
            expect(action.type).toBe('netlogger/setServerInfo')
            expect(action.payload).toMatchObject({
              ServerHost: 'http://www.netlogger.org:80',
              ServerName: 'NETLOGGER',
              ClusterName: 'NETLOGGER',
              DefaultAIMInterval: '30000',
              ServerListURL: 'http://www.netlogger.org/downloads/ServerList.txt',
            })

            action = actions.shift()
            expect(action.type).toBe('netlogger/setMeta')
            expect(action.payload.lastUpdated).toBeTruthy()

            action = actions.shift()
            expect(action.type).toBe('netlogger/setServerInfo')
            expect(action.payload).toMatchObject({
              ServerHost: 'http://www.netlogger1.org:80',
              ServerName: 'NETLOGGER1',
              ClusterName: 'NETLOGGER1',
              DefaultAIMInterval: '20000',
              ServerListURL: 'http://www.netlogger.org/downloads/ServerList.txt',
            })

            action = actions.shift()
            expect(action.type).toBe('netlogger/setMeta')
            expect(action.payload.lastUpdated).toBeTruthy()

            action = actions.shift()
            expect(action.type).toBe('netlogger/setServerInfo')
            expect(action.payload).toMatchObject({
              ServerHost: 'http://www.netlogger2.org:80',
              ServerName: 'NETLOGGER2',
              ClusterName: 'NETLOGGER2',
              DefaultAIMInterval: '20000',
              ServerListURL: 'http://www.netlogger.org/downloads/ServerList.txt',
            })

            action = actions.shift()
            expect(action.type).toBe('netlogger/setMeta')
            expect(action.payload.lastUpdated).toBeTruthy()

            action = actions.shift()
            expect(action.type).toBe('netlogger/addNets')
            expect(action.payload).toEqual([])

            action = actions.shift()
            expect(action.type).toBe('netlogger/addNets')
            expect(action.payload.length).toBe(24)
            expect(action.payload[0]).toMatchObject({
              NetName: '160m net on 1900kHz',
              NetControl: 'KE8USA',
              Frequency: '1.9MHz',
            })
            expect(action.payload[3]).toMatchObject({
              NetName: 'BARS Thursday Night Net',
              NetControl: 'KD9LDD',
              Frequency: '147.330',
            })
            expect(action.payload[23]).toMatchObject({
              NetName: 'WC5C Weekly Net',
              NetControl: 'AC5V',
              Frequency: '147.16',
            })

            action = actions.shift()
            expect(action.type).toBe('netlogger/addNets')
            expect(action.payload).toEqual([])

            expect(actions).toEqual([])

            done()
          })
        })
        .catch((error) => {
          done(error)
        })
    })
  })

  describe('Subscribe to Net', () => {
    test('Subscribes to a net', (done) => {
      const store = mockStore({
        netlogger: {
          nets: {
            'Graveyard Net': {
              NetName: 'Graveyard Net',
              ServerHost: 'http://www.netlogger1.org:80',
              ServerName: 'NETLOGGER1',
            },
          },
        },
      })
      store
        .dispatch(getNetSubscription('Graveyard Net'))
        .then(() => {
          const actions = store.getActions()

          let action

          action = actions.shift()
          expect(action.type).toBe('netlogger/setNetParts')
          expect(action.payload).toMatchObject({
            NetName: 'Graveyard Net',
            data: { isLoading: true },
          })

          action = actions.shift()
          expect(action.type).toBe('netlogger/setNetParts')
          expect(action.payload.NetName).toBe('Graveyard Net')

          expect(action.payload.data).toMatchObject({
            NetName: 'Graveyard Net',
            Frequency: '3.967',
            MiscNetParameters: '',
            InactivityTimer: '30',
            isLoading: false,
          })

          expect(action.payload.checkins.length).toBe(19)
          expect(action.payload.checkins[0]).toMatchObject({
            Callsign: 'KD2OAM',
            PreferredName: 'John',
          })
          expect(action.payload.checkins[7]).toMatchObject({
            Callsign: 'N2VZD',
            County: 'Onondaga',
          })
          expect(action.payload.checkins[14]).toMatchObject({
            Callsign: 'WA1CYL',
            Grid: 'FN54uo',
            operating: true,
          })

          expect(action.payload.monitors.length).toBe(14)
          expect(action.payload.monitors[0]).toMatchObject({
            NamePlusVersion: 'KD2OAM-JOHN - v3.1.7W',
            IPAddress: '74.70.11.192',
          })

          expect(action.payload.ims.length).toBe(13)
          expect(action.payload.ims[0]).toMatchObject({
            ID: '4159589',
            Name: 'KD2OAM-JOHN',
            Message:
              'Welcome to the Graveyard Net. Net starts at 06:00 and will go to 08:00. Your host for this morning is John, KD2OAM. All are welcome to participate.',
          })

          expect(action.payload.exts.length).toBe(15)
          expect(action.payload.exts[14]).toMatchObject({
            ID: '1463355',
            Name: 'W2ASD-SEBAS',
          })

          expect(actions).toEqual([])

          done()
        })
        .catch((error) => {
          done(error)
        })
    })
  })
})
